{% layout 'layout' %}
{% section 'header' %}
<style>
  .hidden {
    display: none;
  }

  .design-page-container {
    display: flex;
    justify-content: space-around;
    align-items: flex-start;
    margin: 0 20px;
  }

  .left-section,
  .right-section {
    position: relative;
    flex: 1;
    min-height: 60vh;  /* Adjusted the min-height here */
    display: flex;
    flex-direction: column;
    align-items: center;
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 10px;
    box-sizing: border-box;
    overflow: hidden;
  }

  .left-section {
    background: linear-gradient(to bottom right, orange, red);
  }

  .right-section {
    background: linear-gradient(to bottom right, orange, green);
  }

  @media (max-width: 768px) {
    .design-page-container {
      flex-direction: column;
      align-items: stretch;
    }
    .left-section,
    .right-section {
      flex: none;
      width: 100%;
      height: auto;
    }
  }
</style>

<div

     #generateDesignBtn,
    #checkoutBtn,
    #pixelArtBtn {
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    #generateDesignBtn:hover,
    #checkoutBtn:hover,
    #pixelArtBtn:hover {
      background-color: #2980b9;
    }

    #generateDesignBtn {
      margin-bottom: 70px;
    }

     .inspiration-section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: linear-gradient(to bottom right, yellow, orange);
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 20px;
    box-sizing: border-box;
    margin-top: 20px;
    margin-right: 20px;
    margin-left: 20px;
  }

  .inspiration-images-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;

  }

  .inspiration-images-container img {
    width: 30%;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  .how-it-works-section {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: linear-gradient(to bottom right, yellow, orange);
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 20px;
    box-sizing: border-box;
    margin-top: 20px;
    margin-right: 20px;
    margin-left: 20px;
    margin-bottom: 20px;
  }

  .how-it-works-section ol {
    margin-left: 20px;
  }

  .how-it-works-section ol li {
    margin-bottom: 10px;
  }

    #designPrompt {
      width: 100%;
      height: 40px;
      margin-bottom: 20px;
    }

    canvas {
      display: none;
    }

    .canvas-container {
      position: relative;  /* Add this line */
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      height: 100%;
    }

    /* Loading Animation CSS */
    #loadingAnimation {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      z-index: 9999;
    }

    .loader {
      border: 5px solid #f3f3f3;
      border-top: 5px solid #3498db;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 2s linear infinite;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

  /* Add Media Query for Mobile View */
  @media (max-width: 768px) {
    .design-page-container {
      flex-direction: column;
      align-items: stretch;
    }
    .left-section,
    .right-section {
      flex: none;
      width: 100%;
      height: auto;
    }
  }
</style>

<div class="design-page">
  <div class="design-page-container">
    <div class="left-section">
      <h1>Design your T-Shirt</h1>
      <div>
        <label for="designPrompt">Design prompt:</label>
        <input type="text" id="designPrompt" placeholder="Enter a design prompt" required>
      </div>
      <p>Example: A cat riding a skateboard in space</p>
      <button id="defaultArtBtn">Default</button>
      <button id="pixelArtBtn">Pixel Art</button>
      <button id="fantasyBtn">Fantasy</button>
      <button id="cyberpunkBtn">Cyberpunk</button>
      <button id="cuteBtn">Cute</button>
      <button id="goBtn">Go</button>
    </div>
    <div class="right-section">
      <div class="canvas-container">
        <canvas id="rightDesignCanvas" width="300" height="400"></canvas>
        <div id="loadingAnimation" class="hidden">
          <div class="loader"></div>
        </div>
      </div>
      <button id="removeBackgroundBtn" disabled>Remove Background</button>
      <button id="checkoutBtn" disabled>Checkout</button>
    </div>
  </div>

  <div class="inspiration-section">
    <h2>Inspiration Gallery</h2>
    <div class="inspiration-images-container">
      <img src="inspiration1.jpg" alt="Inspiration 1">
      <img src="inspiration2.jpg" alt="Inspiration 2">
      <img src="inspiration3.jpg" alt="Inspiration 3">
    </div>
  </div>

  <div class="how-it-works-section">
    <h2>How it Works</h2>
    <p>It's easy to design your own custom T-shirt!</p>
    <ol>
      <li>Enter a design prompt.</li>
      <li>Click "Generate Design."</li>
      <li>Customize the design if desired.</li>
      <li>Click "Checkout" to purchase your custom T-shirt!</li>
    </ol>
  </div>


<script>
  
 var tshirtTemplateUrl = "{{ 'tshirtTemplate.png' | asset_url }}";
  const A4_WIDTH_IN_PIXELS = 2480;

  console.log('T-shirt Template URL:', tshirtTemplateUrl);
  console.log('JavaScript loaded successfully!');

  let currentImageType = "original";  // Initialize to "original"
  let imageUrl = '';
  let selectedApi = null;
  let metadata = {
  originalImageUrl: null,
  noBackgroundImageUrl: null,
  checkoutVersionURL: null,
  checkoutVersion: null
};

  function enableCheckout() {
    const checkoutBtn = document.getElementById('checkoutBtn');
    const removeBackgroundBtn = document.getElementById('removeBackgroundBtn');
    if (imageUrl) {
      checkoutBtn.disabled = false;
      removeBackgroundBtn.disabled = false;
    } else {
      checkoutBtn.disabled = true;
      removeBackgroundBtn.disabled = true;
    }
  }

  function showLoading() {
    const loadingAnimation = document.getElementById('loadingAnimation');
    loadingAnimation.classList.remove('hidden');
  }

  function hideLoading() {
    const loadingAnimation = document.getElementById('loadingAnimation');
    loadingAnimation.classList.add('hidden');
  }

  function enableCheckout() {
    const checkoutBtn = document.getElementById('checkoutBtn');
    const removeBackgroundBtn = document.getElementById('removeBackgroundBtn');
    if (imageUrl) {
      checkoutBtn.disabled = false;
      removeBackgroundBtn.disabled = false;
    } else {
      checkoutBtn.disabled = true;
      removeBackgroundBtn.disabled = true;
    }
  }

  function checkout() {
  if (currentImageType === "original") {
    console.log("User checked out with the original DeepAI generated image.");
  } else if (currentImageType === "noBackground") {
    console.log("User checked out with the image with no background.");
  }
  metadata.checkoutVersion = currentImageType; // set checkout image version
}

// Attach this function to your checkout button
document.getElementById('checkoutBtn').addEventListener('click', checkout);


  async function canvasToBlob(canvas) {
    return new Promise((resolve) => {
      canvas.toBlob((blob) => {
        resolve(blob);
      }, 'image/png');
    });
  }

  async function removeBackground() {
  console.log("Starting background removal process...");
  const canvasId = 'rightDesignCanvas'; // same ID for both mobile and desktop
  const canvas = document.getElementById(canvasId);
  const blob = await canvasToBlob(canvas);

  const formData = new FormData();
  formData.append("image_file", blob);
  
  console.log("Sending API request to remove background...");

  const response = await fetch("https://sdk.photoroom.com/v1/segment", {
    method: "POST",
    headers: { "x-api-key": "77cf11414395ab4315629a1d456fa1cb4d9148c4" },
    body: formData
  });

  if (response.ok) {
  const blob = await response.blob();
  const url = URL.createObjectURL(blob);
  console.log("Background removed successfully!");
  console.log("URL of the image with removed background:", url);
  currentImageType = "noBackground";  // Set to "noBackground"
  return url;
}
 else {
    const errorMsg = await response.text();
    console.error('Failed to remove background:', errorMsg);
    return null;
  }
}



async function drawImageOnCanvas(imageUrl) {
  showLoading();

  const canvasId = 'rightDesignCanvas';
  const canvas = document.getElementById(canvasId);
  const ctx = canvas.getContext('2d');
  
  const img = new Image();
  img.crossOrigin = "Anonymous";

  const tshirtImg = new Image();
  tshirtImg.crossOrigin = "Anonymous";
  tshirtImg.src = tshirtTemplateUrl;

  const promises = [new Promise(resolve => tshirtImg.onload = resolve)];
  
  if (imageUrl) {
    img.src = imageUrl;
    promises.push(new Promise(resolve => img.onload = resolve));
  }

  // Wait for images to load
  await Promise.all(promises);

  // Clear canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Draw T-shirt image with aspect ratio preserved
  const tshirtAspectRatio = tshirtImg.width / tshirtImg.height;
  let tshirtWidth = canvas.width;
  let tshirtHeight = tshirtWidth / tshirtAspectRatio;

  if (tshirtHeight > canvas.height) {
    tshirtHeight = canvas.height;
    tshirtWidth = tshirtHeight * tshirtAspectRatio;
  }

  const xOffset = (canvas.width - tshirtWidth) / 2;
  const yOffset = (canvas.height - tshirtHeight) / 2;

  ctx.drawImage(tshirtImg, xOffset, yOffset, tshirtWidth, tshirtHeight);

  // Draw the generated design with aspect ratio preserved
  let designWidth, designHeight, x, y;
  designWidth = canvas.width * 0.25;
  designHeight = img.height * (designWidth / img.width);
  x = (canvas.width - designWidth) / 2;
  y = (canvas.height - designHeight) / 3;
  ctx.drawImage(img, x, y, designWidth, designHeight);

  // Reset to original
  currentImageType = "original";  // Set to "original"

  // Enable checkout button
  enableCheckout();

  console.log(`Canvas dimensions: ${canvas.width}x${canvas.height}`);
  console.log(`Image drawn at dimensions: ${designWidth}x${designHeight}`);
    
  // Add a 2-second delay before hiding the loading overlay
  setTimeout(() => {
    hideLoading();
  }, 2000);
}




  window.addEventListener('load', function() {
  const canvasId = 'rightDesignCanvas';
  const canvas = document.getElementById(canvasId);
  canvas.style.display = 'block';
  const ctx = canvas.getContext('2d');
  const tshirtImg = new Image();
  tshirtImg.crossOrigin = "Anonymous";
  tshirtImg.src = tshirtTemplateUrl;

  // Place this line here
  tshirtImg.onload = () => {
    drawImageOnCanvas(null);
  };

  tshirtImg.onerror = (error) => {
    console.log('Failed to load the T-shirt image.', error);
  };
});


  document.addEventListener('DOMContentLoaded', function () {
    const designPrompt = document.getElementById('designPrompt');
    const apiKey = 'cad8857c-be3d-4102-96bc-a912bf5bb4e4';
    const apiUrlText2Img = 'https://api.deepai.org/api/text2img';
    const apiUrlPixelArt = 'https://api.deepai.org/api/pixel-art-generator';
    const apiUrlFantasy = 'https://api.deepai.org/api/fantasy-world-generator';
    const apiUrlCyberpunk = 'https://api.deepai.org/api/cyberpunk-generator';
    const apiUrlCute = 'https://api.deepai.org/api/cute-creature-generator';

    const removeBackgroundBtn = document.getElementById('removeBackgroundBtn');  
    removeBackgroundBtn.addEventListener('click', async () => {
      console.log("Remove Background Button Clicked");
      const newImageUrl = await removeBackground();
      if (newImageUrl) {
        imageUrl = newImageUrl;
        metadata.noBackgroundImageUrl = newImageUrl; // Update metadata
        drawImageOnCanvas(imageUrl);
      }
    });

    function setApiAndLog(apiUrl, buttonName) {
      console.log(`${buttonName} Button Clicked`);
      selectedApi = apiUrl;
    }

    document.getElementById('defaultArtBtn').addEventListener('click', () => setApiAndLog(apiUrlText2Img, 'Default Art'));
    document.getElementById('pixelArtBtn').addEventListener('click', () => setApiAndLog(apiUrlPixelArt, 'Pixel Art'));
    document.getElementById('fantasyBtn').addEventListener('click', () => setApiAndLog(apiUrlFantasy, 'Fantasy'));
    document.getElementById('cyberpunkBtn').addEventListener('click', () => setApiAndLog(apiUrlCyberpunk, 'Cyberpunk'));
    document.getElementById('cuteBtn').addEventListener('click', () => setApiAndLog(apiUrlCute, 'Cute'));

    document.getElementById('checkoutBtn').addEventListener('click', () => {
  
  metadata.checkoutVersionURL = imageUrl;  // Assuming 'imageUrl' contains the final image URL
  
  // Convert metadata object to an array of name/value pairs
  const customAttributes = {};
  for (const [key, value] of Object.entries(metadata)) {
    customAttributes[key] = value;
  }

  // Add custom attributes to cart item
  const variantId = '44867288793369'; // The variant ID of the product you want to add to the cart

  fetch(`/cart/add.js`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      id: variantId,
      quantity: 1,
      properties: customAttributes
    })
  })
  .then(response => response.json())
  .then(data => {
    // Handle success - here you might want to redirect the user to the cart or directly to the checkout
    window.location.href = '/cart';
  })
  .catch(error => {
    // Handle error - let the user know the product could not be added to the cart
    console.error('There was an error adding the item to the cart:', error);
  });
});


    document.getElementById('goBtn').addEventListener('click', async () => {
      showLoading();
      if (selectedApi) {
        console.log("Go Button Clicked. Using API: ", selectedApi);

        const bodyParams = new URLSearchParams({
          text: designPrompt.value,
          grid_size: "1",
          width: "1536",
          height: "1536",
          image_generator_version: "hd"
        });

        const response = await fetch(selectedApi, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'api-key': apiKey,
          },
          body: bodyParams,
        });

        if (response.ok) {
          const jsonResponse = await response.json();
          imageUrl = jsonResponse.output_url;
          metadata.originalImageUrl = imageUrl; // Update metadata
          console.log("Image URL Received: ", imageUrl);
          await drawImageOnCanvas(imageUrl);
          hideLoading();
        } else {
          const errorResponse = await response.text();
          console.error("API Error:", errorResponse);
          console.error("Status Code:", response.status);
          hideLoading();
        }
      } else {
        console.log("No API selected. Please select an API first.");
        hideLoading();
      }
    });
  });

</script>
